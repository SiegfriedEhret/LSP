{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started # Install a language server from the list of language servers , ensuring it can be started from the command line (is in your PATH). Run \"LSP: Enable Language Server Globally\" or \"LSP: Enable Lanuage Server in Project\" from Sublime's Command Palette to allow the server to start. Open a document in your language - if the server starts its name will be in the left side of the status bar. About LSP # The Language Server Protocol is a specification about the communication protocol for use between text editors or IDEs and language servers - tools which provide language-specific features like autocomplete, go to definition, or documentation on hover. This LSP package acts as an interface between Sublime Text and the language servers, which means that to obtain these features you need to install a server for your language first. Language servers can be provided as standalone executables or might require a runtime environment like Node.js or Python. The list of language servers shows installation instructions and example configurations for several servers that have been tested and are known to work with the LSP package. Visit Langserver.org or the list of language server implementations maintained by Microsoft for a complete overview of available servers for various programming languages. For a few languages you can also find dedicated packages on Package Control, which can optionally be installed to simplify the configuration and installation process of a language server and might provide additional features such as automatic updates for the server: LSP-bash LSP-css LSP-dockerfile LSP-elm LSP-eslint LSP-html LSP-intelephense LSP-json LSP-metals LSP-serenata LSP-typescript LSP-vue LSP-yaml","title":"Getting Started"},{"location":"#getting-started","text":"Install a language server from the list of language servers , ensuring it can be started from the command line (is in your PATH). Run \"LSP: Enable Language Server Globally\" or \"LSP: Enable Lanuage Server in Project\" from Sublime's Command Palette to allow the server to start. Open a document in your language - if the server starts its name will be in the left side of the status bar.","title":"Getting started"},{"location":"#about-lsp","text":"The Language Server Protocol is a specification about the communication protocol for use between text editors or IDEs and language servers - tools which provide language-specific features like autocomplete, go to definition, or documentation on hover. This LSP package acts as an interface between Sublime Text and the language servers, which means that to obtain these features you need to install a server for your language first. Language servers can be provided as standalone executables or might require a runtime environment like Node.js or Python. The list of language servers shows installation instructions and example configurations for several servers that have been tested and are known to work with the LSP package. Visit Langserver.org or the list of language server implementations maintained by Microsoft for a complete overview of available servers for various programming languages. For a few languages you can also find dedicated packages on Package Control, which can optionally be installed to simplify the configuration and installation process of a language server and might provide additional features such as automatic updates for the server: LSP-bash LSP-css LSP-dockerfile LSP-elm LSP-eslint LSP-html LSP-intelephense LSP-json LSP-metals LSP-serenata LSP-typescript LSP-vue LSP-yaml","title":"About LSP"},{"location":"features/","text":"Commands and shortcuts # Plugin commands # Restart Servers: kills all language servers belonging to the active window This command only works when in a supported document. It may change in the future to be always available, or only kill the relevant language server. LSP Settings: Opens package settings. Document actions # Show Code Actions: UNBOUND Symbol References: shift+f12 Rename Symbol: UNBOUND Recommendation: Override F2 (next bookmark) Go to definition / type definition / declaration / implementation: UNBOUND Recommendation: Override f12 (built-in goto definition), LSP falls back to ST3's built-in goto definition command in case LSP fails. Format Document: UNBOUND Format Selection: UNBOUND Document Symbols: UNBOUND Workspace actions # Show Diagnostics Panel: super+shift+M / ctr+alt+M Next/Previous Diagnostic From panel: F4 / shift+F4 Workspace Symbol Search: via command Palette LSP: workspace symbol Execute server commands # For LSP servers that can handle workspace/executeCommand , you can make these commands available into the sublime palette by adding an entry to your existing .sublime-commands file or by creating a new one. Example: [ // ... { \"caption\" : \"Thread First\" , \"command\" : \"lsp_execute\" , \"args\" : { \"command_name\" : \"thread-first\" , \"command_args\" : [ \"${file_uri}\" , 0 , 0 ] } } ] Note: command_args is optional depending on the workspace/executeCommand that are supported by the LSP server. The following variables will be expanded, but only if they are top-level array items and not within nested arrays or objects: Variable Type Description \"$file_uri\" or \"${file_uri}\" string File URI of the active view \"$selection\" or \"${selection}\" string Content of the (topmost) selection \"$offset\" or \"${offset}\" int Character offset of the (topmost) cursor position \"$selection_begin\" or \"${selection_begin}\" int Character offset of the begin of the (topmost) selection \"$selection_end\" or \"${selection_end}\" int Character offset of the end of the (topmost) selection \"$position\" or \"${position}\" object Mapping { 'line': int, 'character': int } of the (topmost) cursor position, see Position \"$range\" or \"${range} object Mapping with 'start' and 'end' positions of the (topmost) selection, see Range Overriding keybindings # LSP's keybindings can be edited from the Preferences: LSP Keybindings command from the command palette. There is a special context called lsp.session_with_capability that can check whether there is a language server active with the given LSP capability . Refer to the ServerCapabilities structure in that link. The following example overrides ctrl+r to use LSP's symbol provider when we're in a javascript or typescript view: { \"command\" : \"lsp_document_symbols\" , \"keys\" : [ \"ctrl+r\" ], \"context\" : [ { \"key\" : \"lsp.session_with_capability\" , \"operator\" : \"equal\" , \"operand\" : \"documentSymbolProvider\" }, { \"key\" : \"selector\" , \"operator\" : \"equal\" , \"operand\" : \"source.ts, source.js\" } ] }, More useful keybindings (OS-X), edit Package Settings -> LSP -> Key Bindings { \"keys\" : [ \"f2\" ], \"command\" : \"lsp_symbol_rename\" }, { \"keys\" : [ \"f12\" ], \"command\" : \"lsp_symbol_definition\" }, { \"keys\" : [ \"super+option+r\" ], \"command\" : \"lsp_document_symbols\" }, { \"keys\" : [ \"super+option+h\" ], \"command\" : \"lsp_hover\" } Show autocomplete documentation # Some completion items can have documentation associated with them. To show the documentation popup you can click the More link in the bottom of the autocomplete, or you can use the default sublime keybinding F12 to trigger it. You can change the default keybinding by remapping the command as below: { \"command\" : \"auto_complete_open_link\" , \"keys\" : [ \"f12\" ], \"context\" : [ { \"key\" : \"auto_complete_visible\" , \"operator\" : \"equal\" , \"operand\" : true } ] }, Note that F12 may conflict with your Goto Definition keybinding. To avoid the conflict, make sure that you have a context which checks that the AC widget is not visible: { \"command\" : \"lsp_symbol_definition\" , \"keys\" : [ \"f12\" ], \"context\" : [ { \"key\" : \"lsp.session_with_capability\" , \"operator\" : \"equal\" , \"operand\" : \"definitionProvider\" }, { \"key\" : \"auto_complete_visible\" , \"operator\" : \"equal\" , \"operand\" : false } ] }, There is an example of this in LSP's default keybindings. Mouse map configuration # See below link, but bind to lsp_symbol_definition command https://stackoverflow.com/questions/16235706/sublime-3-set-key-map-for-function-goto-definition Configuring # Sublime settings # Add these settings to LSP settings, your Sublime settings, Syntax-specific settings and/or in Project files. lsp_format_on_save false run the server's formatProvider (if supported) on a document before saving. lsp_code_actions_on_save {} request code actions with specified identifiers to trigger before saving. Package settings (LSP) # inhibit_word_completions true disable sublime word completion inhibit_snippet_completions false disable sublime snippet completion show_code_actions annotation Show code actions: \"annotation\", \"bulb\" code_action_on_save_timeout_ms 2000 the amount of time the code actions on save are allowed to run for show_references_in_quick_panel false show symbol references in Sublime's quick panel instead of the bottom panel show_view_status true show permanent language server status in the status bar 'diagnostics_delay_ms' 0 delay showing diagnostics by this many milliseconds diagnostics_additional_delay_auto_complete_ms 0 additional delay when the AC widget is visible auto_show_diagnostics_panel always ( never , saved ) open the diagnostics panel automatically if there are diagnostics show_diagnostics_count_in_view_status false show errors and warnings count in the status bar show_diagnostics_in_view_status true when on a diagnostic with the cursor, show the text in the status bar diagnostics_highlight_style \"underline\" highlight style of code diagnostics: \"box\", \"underline\", \"stippled\", \"squiggly\" or \"\" highlight_active_signature_parameter : highlight the active parameter of the currently active signature document_highlight_style : document highlight style: \"box\", \"underline\", \"stippled\", \"squiggly\" or \"\" document_highlight_scopes : customize your sublime text scopes for document highlighting diagnostics_gutter_marker \"dot\" gutter marker for code diagnostics: \"dot\", \"circle\", \"bookmark\", \"sign\" or \"\" show_symbol_action_links false show links to symbol actions like go to, references and rename in the hover popup disabled_capabilities , [] Turn off client capabilities (features): \"hover\", \"completion\", \"documentHighlight\", \"colorProvider\", \"signatureHelp\" log_debug false show debug logging in the sublime console log_server [] log communication from and to language servers log_stderr false show language server stderr output in the console log_max_size 8192 max number of characters of payloads to print","title":"Features"},{"location":"features/#commands-and-shortcuts","text":"","title":"Commands and shortcuts"},{"location":"features/#plugin-commands","text":"Restart Servers: kills all language servers belonging to the active window This command only works when in a supported document. It may change in the future to be always available, or only kill the relevant language server. LSP Settings: Opens package settings.","title":"Plugin commands"},{"location":"features/#document-actions","text":"Show Code Actions: UNBOUND Symbol References: shift+f12 Rename Symbol: UNBOUND Recommendation: Override F2 (next bookmark) Go to definition / type definition / declaration / implementation: UNBOUND Recommendation: Override f12 (built-in goto definition), LSP falls back to ST3's built-in goto definition command in case LSP fails. Format Document: UNBOUND Format Selection: UNBOUND Document Symbols: UNBOUND","title":"Document actions"},{"location":"features/#workspace-actions","text":"Show Diagnostics Panel: super+shift+M / ctr+alt+M Next/Previous Diagnostic From panel: F4 / shift+F4 Workspace Symbol Search: via command Palette LSP: workspace symbol","title":"Workspace actions"},{"location":"features/#execute-server-commands","text":"For LSP servers that can handle workspace/executeCommand , you can make these commands available into the sublime palette by adding an entry to your existing .sublime-commands file or by creating a new one. Example: [ // ... { \"caption\" : \"Thread First\" , \"command\" : \"lsp_execute\" , \"args\" : { \"command_name\" : \"thread-first\" , \"command_args\" : [ \"${file_uri}\" , 0 , 0 ] } } ] Note: command_args is optional depending on the workspace/executeCommand that are supported by the LSP server. The following variables will be expanded, but only if they are top-level array items and not within nested arrays or objects: Variable Type Description \"$file_uri\" or \"${file_uri}\" string File URI of the active view \"$selection\" or \"${selection}\" string Content of the (topmost) selection \"$offset\" or \"${offset}\" int Character offset of the (topmost) cursor position \"$selection_begin\" or \"${selection_begin}\" int Character offset of the begin of the (topmost) selection \"$selection_end\" or \"${selection_end}\" int Character offset of the end of the (topmost) selection \"$position\" or \"${position}\" object Mapping { 'line': int, 'character': int } of the (topmost) cursor position, see Position \"$range\" or \"${range} object Mapping with 'start' and 'end' positions of the (topmost) selection, see Range","title":"Execute server commands"},{"location":"features/#overriding-keybindings","text":"LSP's keybindings can be edited from the Preferences: LSP Keybindings command from the command palette. There is a special context called lsp.session_with_capability that can check whether there is a language server active with the given LSP capability . Refer to the ServerCapabilities structure in that link. The following example overrides ctrl+r to use LSP's symbol provider when we're in a javascript or typescript view: { \"command\" : \"lsp_document_symbols\" , \"keys\" : [ \"ctrl+r\" ], \"context\" : [ { \"key\" : \"lsp.session_with_capability\" , \"operator\" : \"equal\" , \"operand\" : \"documentSymbolProvider\" }, { \"key\" : \"selector\" , \"operator\" : \"equal\" , \"operand\" : \"source.ts, source.js\" } ] }, More useful keybindings (OS-X), edit Package Settings -> LSP -> Key Bindings { \"keys\" : [ \"f2\" ], \"command\" : \"lsp_symbol_rename\" }, { \"keys\" : [ \"f12\" ], \"command\" : \"lsp_symbol_definition\" }, { \"keys\" : [ \"super+option+r\" ], \"command\" : \"lsp_document_symbols\" }, { \"keys\" : [ \"super+option+h\" ], \"command\" : \"lsp_hover\" }","title":"Overriding keybindings"},{"location":"features/#show-autocomplete-documentation","text":"Some completion items can have documentation associated with them. To show the documentation popup you can click the More link in the bottom of the autocomplete, or you can use the default sublime keybinding F12 to trigger it. You can change the default keybinding by remapping the command as below: { \"command\" : \"auto_complete_open_link\" , \"keys\" : [ \"f12\" ], \"context\" : [ { \"key\" : \"auto_complete_visible\" , \"operator\" : \"equal\" , \"operand\" : true } ] }, Note that F12 may conflict with your Goto Definition keybinding. To avoid the conflict, make sure that you have a context which checks that the AC widget is not visible: { \"command\" : \"lsp_symbol_definition\" , \"keys\" : [ \"f12\" ], \"context\" : [ { \"key\" : \"lsp.session_with_capability\" , \"operator\" : \"equal\" , \"operand\" : \"definitionProvider\" }, { \"key\" : \"auto_complete_visible\" , \"operator\" : \"equal\" , \"operand\" : false } ] }, There is an example of this in LSP's default keybindings.","title":"Show autocomplete documentation"},{"location":"features/#mouse-map-configuration","text":"See below link, but bind to lsp_symbol_definition command https://stackoverflow.com/questions/16235706/sublime-3-set-key-map-for-function-goto-definition","title":"Mouse map configuration"},{"location":"features/#configuring","text":"","title":"Configuring"},{"location":"features/#sublime-settings","text":"Add these settings to LSP settings, your Sublime settings, Syntax-specific settings and/or in Project files. lsp_format_on_save false run the server's formatProvider (if supported) on a document before saving. lsp_code_actions_on_save {} request code actions with specified identifiers to trigger before saving.","title":"Sublime settings"},{"location":"features/#package-settings-lsp","text":"inhibit_word_completions true disable sublime word completion inhibit_snippet_completions false disable sublime snippet completion show_code_actions annotation Show code actions: \"annotation\", \"bulb\" code_action_on_save_timeout_ms 2000 the amount of time the code actions on save are allowed to run for show_references_in_quick_panel false show symbol references in Sublime's quick panel instead of the bottom panel show_view_status true show permanent language server status in the status bar 'diagnostics_delay_ms' 0 delay showing diagnostics by this many milliseconds diagnostics_additional_delay_auto_complete_ms 0 additional delay when the AC widget is visible auto_show_diagnostics_panel always ( never , saved ) open the diagnostics panel automatically if there are diagnostics show_diagnostics_count_in_view_status false show errors and warnings count in the status bar show_diagnostics_in_view_status true when on a diagnostic with the cursor, show the text in the status bar diagnostics_highlight_style \"underline\" highlight style of code diagnostics: \"box\", \"underline\", \"stippled\", \"squiggly\" or \"\" highlight_active_signature_parameter : highlight the active parameter of the currently active signature document_highlight_style : document highlight style: \"box\", \"underline\", \"stippled\", \"squiggly\" or \"\" document_highlight_scopes : customize your sublime text scopes for document highlighting diagnostics_gutter_marker \"dot\" gutter marker for code diagnostics: \"dot\", \"circle\", \"bookmark\", \"sign\" or \"\" show_symbol_action_links false show links to symbol actions like go to, references and rename in the hover popup disabled_capabilities , [] Turn off client capabilities (features): \"hover\", \"completion\", \"documentHighlight\", \"colorProvider\", \"signatureHelp\" log_debug false show debug logging in the sublime console log_server [] log communication from and to language servers log_stderr false show language server stderr output in the console log_max_size 8192 max number of characters of payloads to print","title":"Package settings (LSP)"},{"location":"language_servers/","text":"Language Servers # The following list can help you to install and configure language servers for use with LSP. Please remember to put the configurations in a \"clients\" dictionary in your LSP.sublime-settings file, as shown in the example above. If you use or would like to use language servers that are not in this list, please create issues or pull requests, so we can add support for more languages. Bash # Make sure you have node installed. Download the LSP-bash helper package. C/C++ # See the dedicated C/C++ guide for using ccls or clangd. C# # Download or build OmniSharp . Add to LSP settings' clients: \"omnisharp\" : { \"command\" : [ \"/home/tb/prebuilt/omnisharp/OmniSharp.exe\" , // or eg. /usr/local/opt/omnisharp/run \"-lsp\" ], \"enabled\" : true , \"languageId\" : \"csharp\" , \"document_selector\" : \"source.cs\" } Clojure # Download clojure-lsp . Add to LSP settings' clients: \"clojure-lsp\" : { \"command\" : [ \"java\" , \"-jar\" , \"/PATH/TO/clojure-lsp\" ], \"enabled\" : true , \"initializationOptions\" : {}, \"languageId\" : \"clojure\" // will match source.clojure } clojure-lsp has a rich set of initializationOptions . CSS # Install the CSS language server from VS Code: npm install -g vscode-css-languageserver-bin Run \"LSP: Enable Language Server Globally\" from the Command Palette and choose vscode-css . D # Install the D Language Server : dub fetch dls dub run dls:bootstrap Add to LSP settings' clients: \"dls\" : { \"command\" : [ \"<PATH TO DLS EXECUTABLE>\" ], \"enabled\" : true , \"languageId\" : \"d\" // will match source.d } Dart # Install the Dartlight package from Package Control for syntax highlighting. Install the Dart SDK and locate path to analysis_server.dart.snapshot in the \"snapshots/bin\" directory. Add to LSP settings' clients (adjust the path if necessary): \"dart\" : { \"command\" : [ \"dart\" , \"/usr/local/opt/dart/libexec/bin/snapshots/analysis_server.dart.snapshot\" , \"--lsp\" ], \"enabled\" : true , \"languageId\" : \"dart\" // will match source.dart } Note : The older natebosch/dart_language_server is now deprecated. Dockerfile # Install the Dockerfile Syntax Highlighting package from Package Control for syntax highlighting. Install the Dockerfile Language Server : npm install -g dockerfile-language-server-nodejs Add to LSP settings' clients: \"docker-langserver\" : { \"command\" : [ \"docker-langserver\" , \"--stdio\" ], \"enabled\" : true , \"languageId\" : \"dockerfile\" , // will match source.dockerfile \"settings\" : { // string values must be equal to \"ignore\", \"warning\", or \"error\" \"docker.languageserver.diagnostics.deprecatedMaintainer\" : \"warning\" , \"docker.languageserver.diagnostics.directiveCasing\" : \"warning\" , \"docker.languageserver.diagnostics.emptyContinuationLine\" : \"warning\" , \"docker.languageserver.diagnostics.instructionCasing\" : \"warning\" , \"docker.languageserver.diagnostics.instructionCmdMultiple\" : \"warning\" , \"docker.languageserver.diagnostics.instructionEntrypointMultiple\" : \"warning\" , \"docker.languageserver.diagnostics.instructionHealthcheckMultiple\" : \"warning\" , \"docker.languageserver.diagnostics.instructionJSONInSingleQuotes\" : \"warning\" }, } Elixir # Install the Elixir package from Package Control for syntax highlighting. Download the prebuilt binaries or compile elixir-ls . This will get you a folder containing language_server.sh among other things. Add to LSP settings' clients (adjust the path if necessary): \"elixir-ls\" : { \"command\" : [ \"/home/someUser/somePlace/elixir-ls/release/language_server.sh\" ], \"enabled\" : true , \"languageId\" : \"elixir\" // will match source.elixir } Elm # Install the Elm Syntax Highlighting package from Package Control for syntax highlighting. See instructions for installing the elm-language-server . Add to LSP settings' clients: \"elm\" : { \"command\" : [ \"elm-language-server\" , \"--stdio\" ], \"enabled\" : true , \"initializationOptions\" : { \"elmAnalyseTrigger\" : \"change\" }, \"languageId\" : \"elm\" // will match source.elm } Erlang # See instructions for installing the Erlang Language Server . Add to LSP settings' clients: \"erlang-ls\" : { \"command\" : [ \"/path/to/my/erlang_ls\" , \"--transport\" , \"stdio\" ], \"enabled\" : true , \"languageId\" : \"erlang\" // will match source.erlang } Flow (JavaScript) # Official part of flow-bin : npm install -g flow-bin Older flow-language-server : npm install -g flow-language-server Fortran # Install the Fortran package from Package Control for syntax highlighting. Install the Fortran Language Server (requires Python): pip install fortran-language-server Add to LSP settings' clients: \"fortls\" : { \"command\" : [ \"fortls\" ], \"enabled\" : true , \"languageId\" : \"fortran\" , \"document_selector\" : \"source.modern-fortran | source.fixedform-fortran\" } Note : See the Language server settings documentation for a detailed description of available configuration options, for example \"command\": [\"fortls\", \"--lowercase_intrinsics\"] to use lowercase for autocomplete suggestions. Go # Gopls # Install gopls , the official language server for the Go language: go get golang.org/x/tools/gopls@latest Run \"LSP: Enable Language Server Globally\" from the Command Palette and choose gopls . Note : See the User guide for detailed installation instructions and configurations. Sourcegraph's go-langserver # Install Sourcegraph's Go Language Server : go get github.com/sourcegraph/go-langserver Run \"LSP: Enable Language Server Globally\" from the Command Palette and choose golsp . Note : Work on this language server has been deprioritized in favor of the gopls language server mentioned above. Haskell # Install haskell-language-server . Add to LSP settings' clients: \"haskell-language-server\" : { \"enabled\" : true \"command\" : [ \"haskell-language-server-wrapper\" , \"--lsp\" ], \"languageId\" : \"haskell\" , \"scopes\" : [ \"source.haskell\" ], \"syntaxes\" : [ \"Packages/Haskell/Haskell.sublime-syntax\" ], } Java # Eclipse JDT Language Server # Download and extract Eclipse's jdt-ls . Add to LSP settings' clients: \"jdtls\" : { \"command\" : [ \"java\" , \"--add-modules=ALL-SYSTEM\" , \"--add-opens\" , \"java.base/java.util=ALL-UNNAMED\" , \"--add-opens\" , \"java.base/java.lang=ALL-UNNAMED\" , \"-Declipse.application=org.eclipse.jdt.ls.core.id1\" , \"-Dosgi.bundles.defaultStartLevel=4\" , \"-Declipse.product=org.eclipse.jdt.ls.core.product\" , \"-Dfile.encoding=UTF-8\" , \"-DwatchParentProcess={true|false}\" , // false on windows, true other OSs \"-noverify\" , \"-Xmx1G\" , \"-XX:+UseG1GC\" , \"-XX:+UseStringDeduplication\" , \"-jar\" , \"PATH/TO/jdt-language-server-latest/plugins/org.eclipse.equinox.launcher_*.jar\" // 1. replace the PATH/TO with your own 2. replace * with the file version \"-configuration\" , \"PATH/TO/jdt-language-server-latest/config_{win|mac|linux}\" , // 1. replace the PATH/TO with your own 2. choose the config folder based on the OS \"-data\" , \"<TEMP_DIR>/${project_base_name}/jdt_ws\" // replace <TEMP_DIR> with the temp folder in your system. macOS: echo $TMPDIR ], \"enabled\" : true , \"languageId\" : \"java\" // will match source.java } IntelliJ # Requires IntelliJ to be running. \"intellij\" : { \"command\" : [], \"languageId\" : \"java\" , // will match source.java \"tcp_port\" : 8080 // default port } ESLint # Make sure you have node installed. Install the LSP-eslint helper package. It will install the server for you in $DATA/Cache. JavaScript/TypeScript # Make sure you have node installed. Install the LSP-typescript helper package. It will install the server for you in $DATA/Cache. Julia # Install the Julia package from Package Control for syntax highlighting. Install the LanguageServer and SymbolServer packages from the Julia REPL: import Pkg; Pkg.add(\"LanguageServer\") Pkg.add(\"SymbolServer\") Add to LSP settings' clients: \"julials\" : { \"command\" : [ \"bash\" , \"PATH_TO_JULIA_SERVER/LanguageServer/contrib/languageserver.sh\" ], // on Linux/macOS // \"command\": [\"julia\", \"--startup-file=no\", \"--history-file=no\", \"-e\", \"using Pkg; using LanguageServer; using LanguageServer.SymbolServer; env_path=dirname(Pkg.Types.Context().env.project_file); server=LanguageServer.LanguageServerInstance(stdin,stdout,false,env_path); run(server)\"], // on Windows \"languageId\" : \"julia\" , \"settings\" : { // Default values from VS Code: \"julia.format.calls\" : true , // Format function calls \"julia.format.comments\" : true , // Format comments \"julia.format.curly\" : true , // Format braces \"julia.format.docs\" : true , // Format inline documentation \"julia.format.indent\" : 4 , // Indent size for formatting \"julia.format.indents\" : true , // Format file indents \"julia.format.iterOps\" : true , // Format loop iterators \"julia.format.kw\" : true , // Remove spaces around = in function keywords \"julia.format.lineends\" : false , // [undocumented] \"julia.format.ops\" : true , // Format whitespace around operators \"julia.format.tuples\" : true , // Format tuples \"julia.lint.call\" : false , // Check calls against existing methods (experimental) \"julia.lint.constif\" : true , // Check for constant conditionals of if statements \"julia.lint.datadecl\" : false , // [undocumented] \"julia.lint.iter\" : true , // Check iterator syntax of loops \"julia.lint.lazy\" : true , // Check for deterministic lazy boolean operators \"julia.lint.modname\" : true , // Check for invalid submodule names \"julia.lint.nothingcomp\" : false , // [undocumented] \"julia.lint.pirates\" : true , // Check for type piracy \"julia.lint.run\" : true , // run the linter on active files \"julia.lint.typeparam\" : true // Check for unused DataType parameters } } Kotlin # Install the Kotlin package from Package Control for syntax highlighting. Install the Kotlin Language Server (requires building first). Add to LSP settings' clients: \"kotlinls\" : { \"command\" : [ \"PATH/TO/KotlinLanguageServer/build/install/kotlin-language-server/bin/kotlin-language-server.bat\" ], \"enabled\" : true , \"languageId\" : \"kotlin\" , // will match source.kotlin \"settings\" : { \"kotlin\" : { // put your server settings here } } } LaTeX # Download a precompiled binary (Windows/Linux/macOS) of the TexLab language server. Add to LSP settings' clients: \"texlab\" : { \"command\" : [ \"PATH/TO/texlab\" ], \"enabled\" : true , \"languages\" : [{ \"languageId\" : \"latex\" , \"document_selector\" : \"text.tex.latex\" }, { \"languageId\" : \"bibtex\" , \"document_selector\" : \"text.bibtex\" }] } Note : To enable code completions while typing, ensure to have text.tex.latex (for LaTeX files) and/or text.bibtex (for BibTeX files) included in the auto_complete_selector setting in your Preferences.sublime-settings file. For further requirements see the TexLab Docs . Lisp # Install cc-lsp using Roswell. Add to LSP settings' clients: \"cc-lsp\" : { \"command\" : [ \"cl-lsp\" , \"stdio\" ], \"enabled\" : true , \"languageId\" : \"lisp\" // will match source.lisp } Lua # Download the VS Code extension . Add to LSP settings' clients: \"lua-ls\" : { \"command\" : [ \"PATH/TO/sumneko.lua-#.#.#/extension/server/bin/lua-language-server\" , \"-E\" , \"PATH/TO/sumneko.lua-#.#.#/extension/server/main.lua\" ], \"enabled\" : true , \"languageId\" : \"lua\" // will match source.lua } Alternatively you can use the less maintained lua-lsp . OCaml/Reason # Install the Reason package from Package Control for syntax highlighting. Install the Reason Language Server . Add to LSP settings' clients: \"reason\" : { \"command\" : [ \"PATH/TO/reason-language-server.exe\" ], \"enabled\" : true , \"languageId\" : \"reason\" , \"document_selector\" : \"source.ocaml | source.reason\" } PHP # Intelephense # Make sure you have node installed. Install the LSP-intelephense helper package. It installs and updates the server for you in $DATA/Cache. Polymer # npm install -g polymer-editor-service Note : requires an up to date version of NodeJS. v6 is the minimum supported version as of 2017. Features: typeahead completions for elements, attributes, and css custom properties documentation on hover for elements and attributes jump to definition for elements, attributes, and css custom properties linting, configured through polymer.json at your workspace root More info: Polymer/polymer-editor-service PowerShell # Install the PowerShell package from Package Control for syntax highlighting. Download and extract the latest release PowerShellEditorServices. Make sure PowerShell help files are up to date by running Update-Help in the PowerShell console (the one you're using in the command below). Add to LSP settings' clients: \"powershell-ls\" : { \"command\" : [ \"powershell\" , // or pwsh for PowerShell Core \"-NoLogo\" , \"-NoProfile\" , \"-NonInteractive\" , \"-ExecutionPolicy\" , \"Bypass\" , // Windows only \"-Command\" , \"PATH/TO/PowerShellEditorServices/PowerShellEditorServices/Start-EditorServices.ps1\" , \"-LogPath\" , \"PATH/TO/pses.log\" , // specify a path where a logfile should be stored \"-LogLevel\" , \"Normal\" , \"-SessionDetailsPath\" , \"PATH/TO/session.json\" , // specify a path where a file for session details should be stored \"-FeatureFlags\" , \"@()\" , \"-HostName\" , \"'Sublime Text'\" , \"-HostProfileId\" , \"subl\" , \"-HostVersion\" , \"1.0.0\" , \"-AdditionalModules\" , \"@()\" , \"-BundledModulesPath\" , \"PATH/TO/PowerShellEditorServices\" , \"-Stdio\" ], \"enabled\" : true , \"languageId\" : \"powershell\" // will match source.powershell } Note : For more details see this issue . Python # There are at least two language servers, use either one. Palantir's Python Language Server # pip install 'python-language-server[all]' Make sure you can run pyls in your terminal. If you've installed it into a virtualenv, you might need to override the path to pyls in global LSP settings (Package Settings -> LSP -> Settings): \"pyls\" : { \"command\" : [ \"/Users/mike/.virtualenvs/pyls-virtual-env/bin/pyls\" ], // example path, adjust it for your use case \"enabled\" : true // if you want to enable Python Language Server globally } If you use a virtualenv for your current project, add a path to it in your project configuration (Project -> Edit Project): { \"settings\" : { \"LSP\" : { \"pyls\" : { \"enabled\" : true , // if you want to enable Python Language Server for current project only \"env\" : { // example path, adjust it for your use case // it needs to be an absolute path, neither $HOME nor ~ work here \"PYTHONPATH\" : \"/Users/mike/.virtualenvs/my-virtual-env/lib/python3.7/site-packages\" } } } } } A basic configuration below can be used for bootstrapping your own: //... \"pyls\" : { \"enabled\" : true , \"command\" : [ \"pyls\" ], \"languageId\" : \"python\" , \"scopes\" : [ \"source.python\" ], \"syntaxes\" : [ \"Packages/Python/Python.sublime-syntax\" , \"Packages/MagicPython/grammars/MagicPython.tmLanguage\" , \"Packages/Djaneiro/Syntaxes/Python Django.tmLanguage\" , ], \"settings\" : { \"pyls.env\" : { // Making Sublime's own libs available to the linters. // \"PYTHONPATH\": \"/Applications/Sublime Text.app/Contents/MacOS/Lib/python33\", }, // Configuration is computed first from user configuration (in home directory), // overridden by configuration passed in by the language client, // and then overridden by configuration discovered in the workspace. \"pyls.configurationSources\" : [ \"pycodestyle\" , // discovered in ~/.config/pycodestyle, setup.cfg, tox.ini and pycodestyle.cfg // \"flake8\", // discovered in ~/.config/flake8, setup.cfg, tox.ini and flake8.cfg ], \"pyls.plugins.jedi.extra_paths\" : [ // The directory where the pip installation package is located ], // Enable fuzzy matches when requesting autocomplete \"pyls.plugins.jedi.jedi_completion.fuzzy\" : true , \"pyls.plugins.jedi.pycodestyle.enabled\" : true , \"pyls.plugins.jedi.pycodestyle.exclude\" : [ // Exclude files or directories which match these patterns ], \"pyls.plugins.jedi.pycodestyle.ignore\" : [ // Exclude files or directories which match these patterns ], // \"pyls.plugins.jedi.pycodestyle.maxLineLength: 80\" // set maximum allowed line length \"pyls.plugins.pydocstyle.enabled\" false , \"pyls.plugins.pyflakes.enabled\" : true , \"pyls.plugins.pylint.enabled\" : false , \"pyls.plugins.yapf.enabled\" : true , // pyls' 3rd Party Plugins, Mypy type checking for Python 3, Must be installed via pip before enabling \"pyls.plugins.pyls_mypy.enabled\" : false , // Install with: pip install pyls-mypy \"pyls.plugins.pyls_mypy.live_mode\" : true } }, See pylint documentation: github:palantir/python-language-server Description of all built-in settings: https://github.com/palantir/python-language-server/blob/develop/vscode-client/package.json Microsoft's Python Language Server # Alternatively, use Microsoft Python Language Server (using .NET Core runtime). Here is a basic configuration to be added to your User/LSP.sublime-settings file: //... \"mspyls\" : { \"enabled\" : true , \"command\" : [ \"dotnet\" , \"exec\" , \"PATH/TO/Microsoft.Python.LanguageServer.dll\" ], \"languageId\" : \"python\" , \"scopes\" : [ \"source.python\" ], \"syntaxes\" : [ \"Packages/Python/Python.sublime-syntax\" , \"Packages/MagicPython/grammars/MagicPython.tmLanguage\" , \"Packages/Djaneiro/Syntaxes/Python Django.tmLanguage\" ], \"initializationOptions\" : { \"interpreter\" : { \"properties\" : { \"UseDefaultDatabase\" : true , \"Version\" : \"3.7\" // python version } } }, \"settings\" : { \"python\" : { // At least an empty \"python\" object is (currently) required to initialise the language server. // Other options can be defined as explained below. } } }, The language server has to be configured as per the Microsoft documentation and the Sublime Text instructions . An exhaustive list of the configuration options can be found in the VSCode documentation . Here is an example of settings: \"settings\" : { \"python\" : { // Solve the 'unresolved import' warning as documented in: // https://github.com/microsoft/python-language-server/blob/master/TROUBLESHOOTING.md#unresolved-import-warnings \"autoComplete\" : { // add extra path for Sublime Text plugins \"extraPaths\" : [ \"/opt/sublime_text\" ] } // Configure the linting options as documented in: // https://github.com/microsoft/python-language-server/#linting-options-diagnostics \"analysis\" : { \"errors\" : [ \"undefined-variable\" ], \"warnings\" : [ \"unknown-parameter-name\" ], \"information\" : [ \"unresolved-import\" ], \"disabled\" : [ \"too-many-function-arguments\" , \"parameter-missing\" ] }, // \"linting\": // { // \"enabled\": \"false\" // } } } R # Install the languageserver package from CRAN (see the CRAN mirrored package on GitHub for more information and up-to-date installation instructions): install.packages(\"languageserver\") Run \"LSP: Enable Language Server Globally\" from the Command Palette and choose rlang . Ruby/Ruby on Rails # Different servers are available for Ruby: Solargraph: Install the solargraph gem (see github:castwide/solargraph for up-to-date installation instructions): gem install solargraph Run \"LSP: Enable Language Server Globally\" from the Command Palette and choose ruby . Sorbet: Install the sorbet and sorbet-runtime gem (see github:sorbet/sorbet ): gem install sorbet gem install sorbet-runtime If you have a Gemfile, using bundler, add sorbet and sorbet-runtime to your Gemfile and run: bundle install Run \"LSP:Enable Language Server Globally\" from the Command Palette and choose sorbet . Rust # Goes well with the Rust Enhanced package which uses the RLS server: github:rust-lang-nursery/rls for up-to-date installation instructions. Alternatively, a newer rust-analyzer server is under development, also supported by LSP. Scala # Metals : Most complete LSP server for Scala, see LSP-metals for installation. SBT : Version 1.x supports limited and unmaintained language server functionalities, setup is described here . Dotty : The future Scala compiler contains LSP support . It is developed against VS Code, so ignore instructions related to VS Code. Get the project compiling with dotty first (see instructions ). At this point LSP should complain in the logs java.util.concurrent.CompletionException: java.io.FileNotFoundException: /Users/tomv/Projects/tomv564/dottytest/finagle/doc/src/sphinx/code/quickstart/.dotty-ide.json Then run sbt configureIDE to create the .dotty-ide.json file Then the LSP plugin should launch as configured in LSP.sublime-settings using coursier. Swift # Install the Swift package from Package Control for syntax highlighting. Install Xcode 11.4 or later and ensure that xcrun -find sourcekit-lsp returns the path to sourcekit-lsp. Terraform # Download terraform-lsp binary and make it available in your PATH. Add to LSP settings' clients: \"terraform\" : { \"command\" : [ \"terraform-lsp\" ], \"enabled\" : true , \"languageId\" : \"terraform\" // will match source.terraform } Vue (Javascript) # See: LSP-vue Be sure to install Vue Syntax Highlight from Package Control. XML # Download jar from angelozerr/lsp4xml . Add to LSP settings' clients: \"lsp4xml\" : { \"command\" : [ \"java\" , \"-DwatchParentProcess=false\" , // false on windows, true on other operating systems // JVM options (not necessary, but the vscode extension uses them by default) \"-noverify\" , // bypass class verification \"-Xmx64M\" , // set the maximum heap size \"-XX:+UseG1GC\" , // use the G1 garbage collector \"-XX:+UseStringDeduplication\" , // enable string deduplication optimisation \"-jar\" , \"PATH/TO/org.eclipse.lsp4xml-uber.jar\" ], \"enabled\" : true , \"languageId\" : \"xml\" , \"document_selector\" : \"text.xml\" } Note : Discussed in this issue .","title":"Language Servers"},{"location":"language_servers/#language-servers","text":"The following list can help you to install and configure language servers for use with LSP. Please remember to put the configurations in a \"clients\" dictionary in your LSP.sublime-settings file, as shown in the example above. If you use or would like to use language servers that are not in this list, please create issues or pull requests, so we can add support for more languages.","title":"Language Servers"},{"location":"language_servers/#bash","text":"Make sure you have node installed. Download the LSP-bash helper package.","title":"Bash"},{"location":"language_servers/#cc","text":"See the dedicated C/C++ guide for using ccls or clangd.","title":"C/C++"},{"location":"language_servers/#c","text":"Download or build OmniSharp . Add to LSP settings' clients: \"omnisharp\" : { \"command\" : [ \"/home/tb/prebuilt/omnisharp/OmniSharp.exe\" , // or eg. /usr/local/opt/omnisharp/run \"-lsp\" ], \"enabled\" : true , \"languageId\" : \"csharp\" , \"document_selector\" : \"source.cs\" }","title":"C&#35;"},{"location":"language_servers/#clojure","text":"Download clojure-lsp . Add to LSP settings' clients: \"clojure-lsp\" : { \"command\" : [ \"java\" , \"-jar\" , \"/PATH/TO/clojure-lsp\" ], \"enabled\" : true , \"initializationOptions\" : {}, \"languageId\" : \"clojure\" // will match source.clojure } clojure-lsp has a rich set of initializationOptions .","title":"Clojure"},{"location":"language_servers/#css","text":"Install the CSS language server from VS Code: npm install -g vscode-css-languageserver-bin Run \"LSP: Enable Language Server Globally\" from the Command Palette and choose vscode-css .","title":"CSS"},{"location":"language_servers/#d","text":"Install the D Language Server : dub fetch dls dub run dls:bootstrap Add to LSP settings' clients: \"dls\" : { \"command\" : [ \"<PATH TO DLS EXECUTABLE>\" ], \"enabled\" : true , \"languageId\" : \"d\" // will match source.d }","title":"D"},{"location":"language_servers/#dart","text":"Install the Dartlight package from Package Control for syntax highlighting. Install the Dart SDK and locate path to analysis_server.dart.snapshot in the \"snapshots/bin\" directory. Add to LSP settings' clients (adjust the path if necessary): \"dart\" : { \"command\" : [ \"dart\" , \"/usr/local/opt/dart/libexec/bin/snapshots/analysis_server.dart.snapshot\" , \"--lsp\" ], \"enabled\" : true , \"languageId\" : \"dart\" // will match source.dart } Note : The older natebosch/dart_language_server is now deprecated.","title":"Dart"},{"location":"language_servers/#dockerfile","text":"Install the Dockerfile Syntax Highlighting package from Package Control for syntax highlighting. Install the Dockerfile Language Server : npm install -g dockerfile-language-server-nodejs Add to LSP settings' clients: \"docker-langserver\" : { \"command\" : [ \"docker-langserver\" , \"--stdio\" ], \"enabled\" : true , \"languageId\" : \"dockerfile\" , // will match source.dockerfile \"settings\" : { // string values must be equal to \"ignore\", \"warning\", or \"error\" \"docker.languageserver.diagnostics.deprecatedMaintainer\" : \"warning\" , \"docker.languageserver.diagnostics.directiveCasing\" : \"warning\" , \"docker.languageserver.diagnostics.emptyContinuationLine\" : \"warning\" , \"docker.languageserver.diagnostics.instructionCasing\" : \"warning\" , \"docker.languageserver.diagnostics.instructionCmdMultiple\" : \"warning\" , \"docker.languageserver.diagnostics.instructionEntrypointMultiple\" : \"warning\" , \"docker.languageserver.diagnostics.instructionHealthcheckMultiple\" : \"warning\" , \"docker.languageserver.diagnostics.instructionJSONInSingleQuotes\" : \"warning\" }, }","title":"Dockerfile"},{"location":"language_servers/#elixir","text":"Install the Elixir package from Package Control for syntax highlighting. Download the prebuilt binaries or compile elixir-ls . This will get you a folder containing language_server.sh among other things. Add to LSP settings' clients (adjust the path if necessary): \"elixir-ls\" : { \"command\" : [ \"/home/someUser/somePlace/elixir-ls/release/language_server.sh\" ], \"enabled\" : true , \"languageId\" : \"elixir\" // will match source.elixir }","title":"Elixir"},{"location":"language_servers/#elm","text":"Install the Elm Syntax Highlighting package from Package Control for syntax highlighting. See instructions for installing the elm-language-server . Add to LSP settings' clients: \"elm\" : { \"command\" : [ \"elm-language-server\" , \"--stdio\" ], \"enabled\" : true , \"initializationOptions\" : { \"elmAnalyseTrigger\" : \"change\" }, \"languageId\" : \"elm\" // will match source.elm }","title":"Elm"},{"location":"language_servers/#erlang","text":"See instructions for installing the Erlang Language Server . Add to LSP settings' clients: \"erlang-ls\" : { \"command\" : [ \"/path/to/my/erlang_ls\" , \"--transport\" , \"stdio\" ], \"enabled\" : true , \"languageId\" : \"erlang\" // will match source.erlang }","title":"Erlang"},{"location":"language_servers/#flow-javascript","text":"Official part of flow-bin : npm install -g flow-bin Older flow-language-server : npm install -g flow-language-server","title":"Flow (JavaScript)"},{"location":"language_servers/#fortran","text":"Install the Fortran package from Package Control for syntax highlighting. Install the Fortran Language Server (requires Python): pip install fortran-language-server Add to LSP settings' clients: \"fortls\" : { \"command\" : [ \"fortls\" ], \"enabled\" : true , \"languageId\" : \"fortran\" , \"document_selector\" : \"source.modern-fortran | source.fixedform-fortran\" } Note : See the Language server settings documentation for a detailed description of available configuration options, for example \"command\": [\"fortls\", \"--lowercase_intrinsics\"] to use lowercase for autocomplete suggestions.","title":"Fortran"},{"location":"language_servers/#go","text":"","title":"Go"},{"location":"language_servers/#gopls","text":"Install gopls , the official language server for the Go language: go get golang.org/x/tools/gopls@latest Run \"LSP: Enable Language Server Globally\" from the Command Palette and choose gopls . Note : See the User guide for detailed installation instructions and configurations.","title":"Gopls"},{"location":"language_servers/#sourcegraphs-go-langserver","text":"Install Sourcegraph's Go Language Server : go get github.com/sourcegraph/go-langserver Run \"LSP: Enable Language Server Globally\" from the Command Palette and choose golsp . Note : Work on this language server has been deprioritized in favor of the gopls language server mentioned above.","title":"Sourcegraph's go-langserver"},{"location":"language_servers/#haskell","text":"Install haskell-language-server . Add to LSP settings' clients: \"haskell-language-server\" : { \"enabled\" : true \"command\" : [ \"haskell-language-server-wrapper\" , \"--lsp\" ], \"languageId\" : \"haskell\" , \"scopes\" : [ \"source.haskell\" ], \"syntaxes\" : [ \"Packages/Haskell/Haskell.sublime-syntax\" ], }","title":"Haskell"},{"location":"language_servers/#java","text":"","title":"Java"},{"location":"language_servers/#eclipse-jdt-language-server","text":"Download and extract Eclipse's jdt-ls . Add to LSP settings' clients: \"jdtls\" : { \"command\" : [ \"java\" , \"--add-modules=ALL-SYSTEM\" , \"--add-opens\" , \"java.base/java.util=ALL-UNNAMED\" , \"--add-opens\" , \"java.base/java.lang=ALL-UNNAMED\" , \"-Declipse.application=org.eclipse.jdt.ls.core.id1\" , \"-Dosgi.bundles.defaultStartLevel=4\" , \"-Declipse.product=org.eclipse.jdt.ls.core.product\" , \"-Dfile.encoding=UTF-8\" , \"-DwatchParentProcess={true|false}\" , // false on windows, true other OSs \"-noverify\" , \"-Xmx1G\" , \"-XX:+UseG1GC\" , \"-XX:+UseStringDeduplication\" , \"-jar\" , \"PATH/TO/jdt-language-server-latest/plugins/org.eclipse.equinox.launcher_*.jar\" // 1. replace the PATH/TO with your own 2. replace * with the file version \"-configuration\" , \"PATH/TO/jdt-language-server-latest/config_{win|mac|linux}\" , // 1. replace the PATH/TO with your own 2. choose the config folder based on the OS \"-data\" , \"<TEMP_DIR>/${project_base_name}/jdt_ws\" // replace <TEMP_DIR> with the temp folder in your system. macOS: echo $TMPDIR ], \"enabled\" : true , \"languageId\" : \"java\" // will match source.java }","title":"Eclipse JDT Language Server"},{"location":"language_servers/#intellij","text":"Requires IntelliJ to be running. \"intellij\" : { \"command\" : [], \"languageId\" : \"java\" , // will match source.java \"tcp_port\" : 8080 // default port }","title":"IntelliJ"},{"location":"language_servers/#eslint","text":"Make sure you have node installed. Install the LSP-eslint helper package. It will install the server for you in $DATA/Cache.","title":"ESLint"},{"location":"language_servers/#javascripttypescript","text":"Make sure you have node installed. Install the LSP-typescript helper package. It will install the server for you in $DATA/Cache.","title":"JavaScript/TypeScript"},{"location":"language_servers/#julia","text":"Install the Julia package from Package Control for syntax highlighting. Install the LanguageServer and SymbolServer packages from the Julia REPL: import Pkg; Pkg.add(\"LanguageServer\") Pkg.add(\"SymbolServer\") Add to LSP settings' clients: \"julials\" : { \"command\" : [ \"bash\" , \"PATH_TO_JULIA_SERVER/LanguageServer/contrib/languageserver.sh\" ], // on Linux/macOS // \"command\": [\"julia\", \"--startup-file=no\", \"--history-file=no\", \"-e\", \"using Pkg; using LanguageServer; using LanguageServer.SymbolServer; env_path=dirname(Pkg.Types.Context().env.project_file); server=LanguageServer.LanguageServerInstance(stdin,stdout,false,env_path); run(server)\"], // on Windows \"languageId\" : \"julia\" , \"settings\" : { // Default values from VS Code: \"julia.format.calls\" : true , // Format function calls \"julia.format.comments\" : true , // Format comments \"julia.format.curly\" : true , // Format braces \"julia.format.docs\" : true , // Format inline documentation \"julia.format.indent\" : 4 , // Indent size for formatting \"julia.format.indents\" : true , // Format file indents \"julia.format.iterOps\" : true , // Format loop iterators \"julia.format.kw\" : true , // Remove spaces around = in function keywords \"julia.format.lineends\" : false , // [undocumented] \"julia.format.ops\" : true , // Format whitespace around operators \"julia.format.tuples\" : true , // Format tuples \"julia.lint.call\" : false , // Check calls against existing methods (experimental) \"julia.lint.constif\" : true , // Check for constant conditionals of if statements \"julia.lint.datadecl\" : false , // [undocumented] \"julia.lint.iter\" : true , // Check iterator syntax of loops \"julia.lint.lazy\" : true , // Check for deterministic lazy boolean operators \"julia.lint.modname\" : true , // Check for invalid submodule names \"julia.lint.nothingcomp\" : false , // [undocumented] \"julia.lint.pirates\" : true , // Check for type piracy \"julia.lint.run\" : true , // run the linter on active files \"julia.lint.typeparam\" : true // Check for unused DataType parameters } }","title":"Julia"},{"location":"language_servers/#kotlin","text":"Install the Kotlin package from Package Control for syntax highlighting. Install the Kotlin Language Server (requires building first). Add to LSP settings' clients: \"kotlinls\" : { \"command\" : [ \"PATH/TO/KotlinLanguageServer/build/install/kotlin-language-server/bin/kotlin-language-server.bat\" ], \"enabled\" : true , \"languageId\" : \"kotlin\" , // will match source.kotlin \"settings\" : { \"kotlin\" : { // put your server settings here } } }","title":"Kotlin"},{"location":"language_servers/#latex","text":"Download a precompiled binary (Windows/Linux/macOS) of the TexLab language server. Add to LSP settings' clients: \"texlab\" : { \"command\" : [ \"PATH/TO/texlab\" ], \"enabled\" : true , \"languages\" : [{ \"languageId\" : \"latex\" , \"document_selector\" : \"text.tex.latex\" }, { \"languageId\" : \"bibtex\" , \"document_selector\" : \"text.bibtex\" }] } Note : To enable code completions while typing, ensure to have text.tex.latex (for LaTeX files) and/or text.bibtex (for BibTeX files) included in the auto_complete_selector setting in your Preferences.sublime-settings file. For further requirements see the TexLab Docs .","title":"LaTeX"},{"location":"language_servers/#lisp","text":"Install cc-lsp using Roswell. Add to LSP settings' clients: \"cc-lsp\" : { \"command\" : [ \"cl-lsp\" , \"stdio\" ], \"enabled\" : true , \"languageId\" : \"lisp\" // will match source.lisp }","title":"Lisp"},{"location":"language_servers/#lua","text":"Download the VS Code extension . Add to LSP settings' clients: \"lua-ls\" : { \"command\" : [ \"PATH/TO/sumneko.lua-#.#.#/extension/server/bin/lua-language-server\" , \"-E\" , \"PATH/TO/sumneko.lua-#.#.#/extension/server/main.lua\" ], \"enabled\" : true , \"languageId\" : \"lua\" // will match source.lua } Alternatively you can use the less maintained lua-lsp .","title":"Lua"},{"location":"language_servers/#ocamlreason","text":"Install the Reason package from Package Control for syntax highlighting. Install the Reason Language Server . Add to LSP settings' clients: \"reason\" : { \"command\" : [ \"PATH/TO/reason-language-server.exe\" ], \"enabled\" : true , \"languageId\" : \"reason\" , \"document_selector\" : \"source.ocaml | source.reason\" }","title":"OCaml/Reason"},{"location":"language_servers/#php","text":"","title":"PHP"},{"location":"language_servers/#intelephense","text":"Make sure you have node installed. Install the LSP-intelephense helper package. It installs and updates the server for you in $DATA/Cache.","title":"Intelephense"},{"location":"language_servers/#polymer","text":"npm install -g polymer-editor-service Note : requires an up to date version of NodeJS. v6 is the minimum supported version as of 2017. Features: typeahead completions for elements, attributes, and css custom properties documentation on hover for elements and attributes jump to definition for elements, attributes, and css custom properties linting, configured through polymer.json at your workspace root More info: Polymer/polymer-editor-service","title":"Polymer"},{"location":"language_servers/#powershell","text":"Install the PowerShell package from Package Control for syntax highlighting. Download and extract the latest release PowerShellEditorServices. Make sure PowerShell help files are up to date by running Update-Help in the PowerShell console (the one you're using in the command below). Add to LSP settings' clients: \"powershell-ls\" : { \"command\" : [ \"powershell\" , // or pwsh for PowerShell Core \"-NoLogo\" , \"-NoProfile\" , \"-NonInteractive\" , \"-ExecutionPolicy\" , \"Bypass\" , // Windows only \"-Command\" , \"PATH/TO/PowerShellEditorServices/PowerShellEditorServices/Start-EditorServices.ps1\" , \"-LogPath\" , \"PATH/TO/pses.log\" , // specify a path where a logfile should be stored \"-LogLevel\" , \"Normal\" , \"-SessionDetailsPath\" , \"PATH/TO/session.json\" , // specify a path where a file for session details should be stored \"-FeatureFlags\" , \"@()\" , \"-HostName\" , \"'Sublime Text'\" , \"-HostProfileId\" , \"subl\" , \"-HostVersion\" , \"1.0.0\" , \"-AdditionalModules\" , \"@()\" , \"-BundledModulesPath\" , \"PATH/TO/PowerShellEditorServices\" , \"-Stdio\" ], \"enabled\" : true , \"languageId\" : \"powershell\" // will match source.powershell } Note : For more details see this issue .","title":"PowerShell"},{"location":"language_servers/#python","text":"There are at least two language servers, use either one.","title":"Python"},{"location":"language_servers/#palantirs-python-language-server","text":"pip install 'python-language-server[all]' Make sure you can run pyls in your terminal. If you've installed it into a virtualenv, you might need to override the path to pyls in global LSP settings (Package Settings -> LSP -> Settings): \"pyls\" : { \"command\" : [ \"/Users/mike/.virtualenvs/pyls-virtual-env/bin/pyls\" ], // example path, adjust it for your use case \"enabled\" : true // if you want to enable Python Language Server globally } If you use a virtualenv for your current project, add a path to it in your project configuration (Project -> Edit Project): { \"settings\" : { \"LSP\" : { \"pyls\" : { \"enabled\" : true , // if you want to enable Python Language Server for current project only \"env\" : { // example path, adjust it for your use case // it needs to be an absolute path, neither $HOME nor ~ work here \"PYTHONPATH\" : \"/Users/mike/.virtualenvs/my-virtual-env/lib/python3.7/site-packages\" } } } } } A basic configuration below can be used for bootstrapping your own: //... \"pyls\" : { \"enabled\" : true , \"command\" : [ \"pyls\" ], \"languageId\" : \"python\" , \"scopes\" : [ \"source.python\" ], \"syntaxes\" : [ \"Packages/Python/Python.sublime-syntax\" , \"Packages/MagicPython/grammars/MagicPython.tmLanguage\" , \"Packages/Djaneiro/Syntaxes/Python Django.tmLanguage\" , ], \"settings\" : { \"pyls.env\" : { // Making Sublime's own libs available to the linters. // \"PYTHONPATH\": \"/Applications/Sublime Text.app/Contents/MacOS/Lib/python33\", }, // Configuration is computed first from user configuration (in home directory), // overridden by configuration passed in by the language client, // and then overridden by configuration discovered in the workspace. \"pyls.configurationSources\" : [ \"pycodestyle\" , // discovered in ~/.config/pycodestyle, setup.cfg, tox.ini and pycodestyle.cfg // \"flake8\", // discovered in ~/.config/flake8, setup.cfg, tox.ini and flake8.cfg ], \"pyls.plugins.jedi.extra_paths\" : [ // The directory where the pip installation package is located ], // Enable fuzzy matches when requesting autocomplete \"pyls.plugins.jedi.jedi_completion.fuzzy\" : true , \"pyls.plugins.jedi.pycodestyle.enabled\" : true , \"pyls.plugins.jedi.pycodestyle.exclude\" : [ // Exclude files or directories which match these patterns ], \"pyls.plugins.jedi.pycodestyle.ignore\" : [ // Exclude files or directories which match these patterns ], // \"pyls.plugins.jedi.pycodestyle.maxLineLength: 80\" // set maximum allowed line length \"pyls.plugins.pydocstyle.enabled\" false , \"pyls.plugins.pyflakes.enabled\" : true , \"pyls.plugins.pylint.enabled\" : false , \"pyls.plugins.yapf.enabled\" : true , // pyls' 3rd Party Plugins, Mypy type checking for Python 3, Must be installed via pip before enabling \"pyls.plugins.pyls_mypy.enabled\" : false , // Install with: pip install pyls-mypy \"pyls.plugins.pyls_mypy.live_mode\" : true } }, See pylint documentation: github:palantir/python-language-server Description of all built-in settings: https://github.com/palantir/python-language-server/blob/develop/vscode-client/package.json","title":"Palantir's Python Language Server"},{"location":"language_servers/#microsofts-python-language-server","text":"Alternatively, use Microsoft Python Language Server (using .NET Core runtime). Here is a basic configuration to be added to your User/LSP.sublime-settings file: //... \"mspyls\" : { \"enabled\" : true , \"command\" : [ \"dotnet\" , \"exec\" , \"PATH/TO/Microsoft.Python.LanguageServer.dll\" ], \"languageId\" : \"python\" , \"scopes\" : [ \"source.python\" ], \"syntaxes\" : [ \"Packages/Python/Python.sublime-syntax\" , \"Packages/MagicPython/grammars/MagicPython.tmLanguage\" , \"Packages/Djaneiro/Syntaxes/Python Django.tmLanguage\" ], \"initializationOptions\" : { \"interpreter\" : { \"properties\" : { \"UseDefaultDatabase\" : true , \"Version\" : \"3.7\" // python version } } }, \"settings\" : { \"python\" : { // At least an empty \"python\" object is (currently) required to initialise the language server. // Other options can be defined as explained below. } } }, The language server has to be configured as per the Microsoft documentation and the Sublime Text instructions . An exhaustive list of the configuration options can be found in the VSCode documentation . Here is an example of settings: \"settings\" : { \"python\" : { // Solve the 'unresolved import' warning as documented in: // https://github.com/microsoft/python-language-server/blob/master/TROUBLESHOOTING.md#unresolved-import-warnings \"autoComplete\" : { // add extra path for Sublime Text plugins \"extraPaths\" : [ \"/opt/sublime_text\" ] } // Configure the linting options as documented in: // https://github.com/microsoft/python-language-server/#linting-options-diagnostics \"analysis\" : { \"errors\" : [ \"undefined-variable\" ], \"warnings\" : [ \"unknown-parameter-name\" ], \"information\" : [ \"unresolved-import\" ], \"disabled\" : [ \"too-many-function-arguments\" , \"parameter-missing\" ] }, // \"linting\": // { // \"enabled\": \"false\" // } } }","title":"Microsoft's Python Language Server"},{"location":"language_servers/#r","text":"Install the languageserver package from CRAN (see the CRAN mirrored package on GitHub for more information and up-to-date installation instructions): install.packages(\"languageserver\") Run \"LSP: Enable Language Server Globally\" from the Command Palette and choose rlang .","title":"R"},{"location":"language_servers/#rubyruby-on-rails","text":"Different servers are available for Ruby: Solargraph: Install the solargraph gem (see github:castwide/solargraph for up-to-date installation instructions): gem install solargraph Run \"LSP: Enable Language Server Globally\" from the Command Palette and choose ruby . Sorbet: Install the sorbet and sorbet-runtime gem (see github:sorbet/sorbet ): gem install sorbet gem install sorbet-runtime If you have a Gemfile, using bundler, add sorbet and sorbet-runtime to your Gemfile and run: bundle install Run \"LSP:Enable Language Server Globally\" from the Command Palette and choose sorbet .","title":"Ruby/Ruby on Rails"},{"location":"language_servers/#rust","text":"Goes well with the Rust Enhanced package which uses the RLS server: github:rust-lang-nursery/rls for up-to-date installation instructions. Alternatively, a newer rust-analyzer server is under development, also supported by LSP.","title":"Rust"},{"location":"language_servers/#scala","text":"Metals : Most complete LSP server for Scala, see LSP-metals for installation. SBT : Version 1.x supports limited and unmaintained language server functionalities, setup is described here . Dotty : The future Scala compiler contains LSP support . It is developed against VS Code, so ignore instructions related to VS Code. Get the project compiling with dotty first (see instructions ). At this point LSP should complain in the logs java.util.concurrent.CompletionException: java.io.FileNotFoundException: /Users/tomv/Projects/tomv564/dottytest/finagle/doc/src/sphinx/code/quickstart/.dotty-ide.json Then run sbt configureIDE to create the .dotty-ide.json file Then the LSP plugin should launch as configured in LSP.sublime-settings using coursier.","title":"Scala"},{"location":"language_servers/#swift","text":"Install the Swift package from Package Control for syntax highlighting. Install Xcode 11.4 or later and ensure that xcrun -find sourcekit-lsp returns the path to sourcekit-lsp.","title":"Swift"},{"location":"language_servers/#terraform","text":"Download terraform-lsp binary and make it available in your PATH. Add to LSP settings' clients: \"terraform\" : { \"command\" : [ \"terraform-lsp\" ], \"enabled\" : true , \"languageId\" : \"terraform\" // will match source.terraform }","title":"Terraform"},{"location":"language_servers/#vue-javascript","text":"See: LSP-vue Be sure to install Vue Syntax Highlight from Package Control.","title":"Vue (Javascript)"},{"location":"language_servers/#xml","text":"Download jar from angelozerr/lsp4xml . Add to LSP settings' clients: \"lsp4xml\" : { \"command\" : [ \"java\" , \"-DwatchParentProcess=false\" , // false on windows, true on other operating systems // JVM options (not necessary, but the vscode extension uses them by default) \"-noverify\" , // bypass class verification \"-Xmx64M\" , // set the maximum heap size \"-XX:+UseG1GC\" , // use the G1 garbage collector \"-XX:+UseStringDeduplication\" , // enable string deduplication optimisation \"-jar\" , \"PATH/TO/org.eclipse.lsp4xml-uber.jar\" ], \"enabled\" : true , \"languageId\" : \"xml\" , \"document_selector\" : \"text.xml\" } Note : Discussed in this issue .","title":"XML"},{"location":"troubleshooting/","text":"Self-help instructions # Enable LSP logging: In LSP Settings enable the log_debug setting. Enable server logging: set log_server to [\"panel\"] and log_stderr to true Run \"LSP: Toggle Log Panel\" from the command palette. No restart is needed. If you believe the issue is with this package, please include the output from the Sublime console in your issue report! Common problems # 1. LSP doesn't start my language server # Make sure you have a folder added in your Sublime workspace. Make sure the document you are opening lives under that folder. Your client configuration requires two settings to match the document your are editing: Scope (eg. source.php ): Verify this is correct by running \"Show Scope Name\" from the developer menu. Syntax (eg. Packages\\PHP\\PHP.sublime-syntax ): Verify by running view.settings().get(\"syntax\") in the console. 2. LSP cannot find my language server ( No such file or directory: 'xyz' ) # Assuming that the server is actually installed, and that you can start it from your shell, this issue is likely due to Sublime Text's internal environment not picking up the same PATH environment variable as you've configured in your shell. You can confirm that the issue is due to PATH being different by starting Sublime Text from the command line so that it inherits your shell's environment. The solution is to make Sublime Text read the same PATH that is read by your shell (or OS in general, in case of Windows). Adjusting PATH can differ based on the operating system and the default shell used. Refer to the following table on where this can be adjusted: Windows Open Start Menu, type \"environment\" and select \"Edit environment variables for your account\". Modify the \"Path\" variable so that it includes the directory path to the program of your choice. macOS Depending on your default shell, edit: ~/.profile (bash), ~/.zprofile (zsh) or ~/.config/fish/config.fish (fish). Linux Edit ~/.profile . The exact changes to make can differ depending on what program you want to expose to Sublime Text. The simplest way is to extend the path like so (replacing /usr/local/bin with the path of your choice): export PATH = \"/usr/local/bin: $PATH \" If, for example, you want to expose a Node binary to ST and you have it installed through a version manager like nvm , you need to insert its initialization script in the location specified in the table above. Note : It might be necessary to re-login your user account after changing the shell initialization script for the changes to be picked up. Known Issues # Completions not shown after certain keywords # Sublime Text's built-in Completion Rules.tmPreferences for some languages surpress completions after certain keywords. Python's import keyword is an example - no completions are shown at import a| (See this LSP issue ). The solution is to put an edited version of the Completion Rules.tmPreferences in the Packages folder (you may need to clear the copy in the Cache folder afterwards). More details on workaround and a final fix for Lua","title":"Troubleshooting"},{"location":"troubleshooting/#self-help-instructions","text":"Enable LSP logging: In LSP Settings enable the log_debug setting. Enable server logging: set log_server to [\"panel\"] and log_stderr to true Run \"LSP: Toggle Log Panel\" from the command palette. No restart is needed. If you believe the issue is with this package, please include the output from the Sublime console in your issue report!","title":"Self-help instructions"},{"location":"troubleshooting/#common-problems","text":"","title":"Common problems"},{"location":"troubleshooting/#1-lsp-doesnt-start-my-language-server","text":"Make sure you have a folder added in your Sublime workspace. Make sure the document you are opening lives under that folder. Your client configuration requires two settings to match the document your are editing: Scope (eg. source.php ): Verify this is correct by running \"Show Scope Name\" from the developer menu. Syntax (eg. Packages\\PHP\\PHP.sublime-syntax ): Verify by running view.settings().get(\"syntax\") in the console.","title":"1. LSP doesn't start my language server"},{"location":"troubleshooting/#2-lsp-cannot-find-my-language-server-no-such-file-or-directory-xyz","text":"Assuming that the server is actually installed, and that you can start it from your shell, this issue is likely due to Sublime Text's internal environment not picking up the same PATH environment variable as you've configured in your shell. You can confirm that the issue is due to PATH being different by starting Sublime Text from the command line so that it inherits your shell's environment. The solution is to make Sublime Text read the same PATH that is read by your shell (or OS in general, in case of Windows). Adjusting PATH can differ based on the operating system and the default shell used. Refer to the following table on where this can be adjusted: Windows Open Start Menu, type \"environment\" and select \"Edit environment variables for your account\". Modify the \"Path\" variable so that it includes the directory path to the program of your choice. macOS Depending on your default shell, edit: ~/.profile (bash), ~/.zprofile (zsh) or ~/.config/fish/config.fish (fish). Linux Edit ~/.profile . The exact changes to make can differ depending on what program you want to expose to Sublime Text. The simplest way is to extend the path like so (replacing /usr/local/bin with the path of your choice): export PATH = \"/usr/local/bin: $PATH \" If, for example, you want to expose a Node binary to ST and you have it installed through a version manager like nvm , you need to insert its initialization script in the location specified in the table above. Note : It might be necessary to re-login your user account after changing the shell initialization script for the changes to be picked up.","title":"2. LSP cannot find my language server (No such file or directory: 'xyz')"},{"location":"troubleshooting/#known-issues","text":"","title":"Known Issues"},{"location":"troubleshooting/#completions-not-shown-after-certain-keywords","text":"Sublime Text's built-in Completion Rules.tmPreferences for some languages surpress completions after certain keywords. Python's import keyword is an example - no completions are shown at import a| (See this LSP issue ). The solution is to put an edited version of the Completion Rules.tmPreferences in the Packages folder (you may need to clear the copy in the Cache folder afterwards). More details on workaround and a final fix for Lua","title":"Completions not shown after certain keywords"},{"location":"guides/cplusplus/","text":"Setup C/C++ # The below was written for clangd, but much applies to cquery and ccls as well. CCLS # Build and install from source or download for your distribution. See the ccls wiki for more details. Clangd # To use clangd on Debian/Ubuntu, add the apt repositories described here . After that, install with e.g. apt install clang-tools-9 . The clangd executable will have a version number suffix. For instance, clangd-9. You will thus have to adjust your \"clients\" dictionary in your user preferences. To use clangd on Mac, use Homebrew: brew install llvm . The clangd executable will be present in /usr/local/Cellar/llvm/ version /bin You probably need to install the Xcode developer command-line tools. Run the following in a terminal: xcode-select --install And if you're on macOS 10.14, also run the following to install essential headers like wchar_t.h : open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg To use clangd on Windows, install LLVM with the LLVM installer , and then add C:\\Program Files\\LLVM\\bin to your %PATH%. Compilation database # For any project of non-trivial size, you probably have a build system in place to compile your source files. The compilation command passed to your compiler might include things like: Include directories, Define directives, Compiler-specific flags. compile_commands.json # Like any language server, clangd works on a per-file (or per-buffer) basis. But unlike most other language servers, it must also be aware of the exact compile flags that you pass to your compiler. For this reason, people have come up with the idea of a compilation database . At this time, this is just a simple JSON file that describes for each translation unit (i.e. a .cpp , .c , .m or .mm file) the exact compilation flags that you pass to your compiler. It's pretty much standardized that this file should be called compile_commands.json . clangd searches for this file up in parent directories from the currently active document . If you don't have such a file present, most likely clangd will spit out nonsense errors and diagnostics about your code. As it turns out, CMake can generate this file for you if you pass it the cache variable -DCMAKE_EXPORT_COMPILE_COMMANDS=ON when invoking CMake. It will be present in your build directory, and you can copy that file to the root of your project. Make sure to ignore this file in your version control system. If you are using a make-based build system, you could use compiledb to generate a compile_commands.json . Since header files are (usually) not passed to a compiler, they don't have compile commands. So even with a compilation database in place, clangd will still spit out nonsense in header files. You can try to remedy this by enhancing your compilation database with your header files using this project called compdb . To generate headers with compdb, read this closed issue . You can also read about attempts to address this on the CMake issue tracker , along with the problem of treating header files as translation units. compile_flags.txt # Another way to let your language server know what the include dirs are is by hand-writing a compile_flags.txt file in your source root. Each line is one flag. This can be useful for projects that e.g. only have a Visual Studio solution file. For more information, see these instructions . Creating this file by hand is a reasonable place to start if your project is quite simple.","title":"Setup C/C++"},{"location":"guides/cplusplus/#setup-cc","text":"The below was written for clangd, but much applies to cquery and ccls as well.","title":"Setup C/C++"},{"location":"guides/cplusplus/#ccls","text":"Build and install from source or download for your distribution. See the ccls wiki for more details.","title":"CCLS"},{"location":"guides/cplusplus/#clangd","text":"To use clangd on Debian/Ubuntu, add the apt repositories described here . After that, install with e.g. apt install clang-tools-9 . The clangd executable will have a version number suffix. For instance, clangd-9. You will thus have to adjust your \"clients\" dictionary in your user preferences. To use clangd on Mac, use Homebrew: brew install llvm . The clangd executable will be present in /usr/local/Cellar/llvm/ version /bin You probably need to install the Xcode developer command-line tools. Run the following in a terminal: xcode-select --install And if you're on macOS 10.14, also run the following to install essential headers like wchar_t.h : open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg To use clangd on Windows, install LLVM with the LLVM installer , and then add C:\\Program Files\\LLVM\\bin to your %PATH%.","title":"Clangd"},{"location":"guides/cplusplus/#compilation-database","text":"For any project of non-trivial size, you probably have a build system in place to compile your source files. The compilation command passed to your compiler might include things like: Include directories, Define directives, Compiler-specific flags.","title":"Compilation database"},{"location":"guides/cplusplus/#compile_commandsjson","text":"Like any language server, clangd works on a per-file (or per-buffer) basis. But unlike most other language servers, it must also be aware of the exact compile flags that you pass to your compiler. For this reason, people have come up with the idea of a compilation database . At this time, this is just a simple JSON file that describes for each translation unit (i.e. a .cpp , .c , .m or .mm file) the exact compilation flags that you pass to your compiler. It's pretty much standardized that this file should be called compile_commands.json . clangd searches for this file up in parent directories from the currently active document . If you don't have such a file present, most likely clangd will spit out nonsense errors and diagnostics about your code. As it turns out, CMake can generate this file for you if you pass it the cache variable -DCMAKE_EXPORT_COMPILE_COMMANDS=ON when invoking CMake. It will be present in your build directory, and you can copy that file to the root of your project. Make sure to ignore this file in your version control system. If you are using a make-based build system, you could use compiledb to generate a compile_commands.json . Since header files are (usually) not passed to a compiler, they don't have compile commands. So even with a compilation database in place, clangd will still spit out nonsense in header files. You can try to remedy this by enhancing your compilation database with your header files using this project called compdb . To generate headers with compdb, read this closed issue . You can also read about attempts to address this on the CMake issue tracker , along with the problem of treating header files as translation units.","title":"compile_commands.json"},{"location":"guides/cplusplus/#compile_flagstxt","text":"Another way to let your language server know what the include dirs are is by hand-writing a compile_flags.txt file in your source root. Each line is one flag. This can be useful for projects that e.g. only have a Visual Studio solution file. For more information, see these instructions . Creating this file by hand is a reasonable place to start if your project is quite simple.","title":"compile_flags.txt"},{"location":"guides/server_configuration/","text":"Server Configuration # After you have installed a language server, the LSP settings need to be configured to enable communication between LSP and that server for suitable filetypes. LSP ships with default configurations for a few language servers, but these need to be enabled before they will start. To globally enable a server, open the Command Palette and choose \"LSP: Enable Language Server Globally\". This will add \"enabled\": true to the corresponding language server setting under the \"clients\" key in your user-settings file for LSP. Your user-settings file is stored at Packages/User/LSP.sublime-settings and can be opened via \"Preferences > Package Settings > LSP > Settings\" from the menu. If your language server is missing or not configured correctly, you need to add/override further settings which are explained below. Here is an example of the LSP.sublime-settings file with configurations for the JavaScript/TypeScript server: { // General settings \"log_stderr\" : true , // Language server configurations \"clients\" : { \"lsp-tsserver\" : { \"command\" : [ \"lsp-tsserver\" ], \"enabled\" : true , \"languageId\" : \"typescript\" , \"document_selector\" : \"source.ts | source.tsx\" } } } Some language servers support multiple languages, which can be specified in the following way: { // General settings \"log_stderr\" : true , // Language server configurations \"clients\" : { \"lsp-tsserver\" : { \"command\" : [ \"lsp-tsserver\" ], \"enabled\" : true , \"languages\" : [{ \"languageId\" : \"javascript\" , \"document_selector\" : \"source.js | source.jsx\" }, { \"languageId\" : \"typescript\" , \"document_selector\" : \"source.ts | source.tsx\" }] } } } Setting Description enabled enables a language server (default is disabled) command must be on PATH or specify a full path, add arguments (can be empty if starting manually, then TCP transport must be configured) env dict of environment variables to be injected into the language server's process (eg. PYTHONPATH) settings per-project settings (equivalent to VS Code's Workspace Settings) initializationOptions options to send to the server at startup (rarely used) document_selector This is the connection between your files and language servers. It's a selector that is matched against the current view's base scope. If the selector matches with the base scope of the the file, the associated language server is started. If the selector happens to be of the form \"source.{languageId}\" (which it is in many cases), then you can omit this \"document_selector\" key altogether, and LSP will assume the selector is \"source.{languageId}\". For more information, see https://www.sublimetext.com/docs/3/selectors.html feature_selector Used to prioritize a certain language server when choosing which one to query on views with multiple servers active. Certain LSP actions have to pick which server to query and this setting can be used to decide which one to pick based on the current scopes at the cursor location. For example when having both HTML and PHP servers running on a PHP file, this can be used to give priority to the HTML one in HTML blocks and to PHP one otherwise. That would be done by setting \"feature_selector\" to text.html for HTML server and source.php to PHP server. Note: when the \"feature_selector\" is missing, it will be the same as the \"document_selector\". languageId identifies the language for a document - see LSP specifications languages group document_selector and languageId together for servers that support more than one language tcp_port see instructions below tcp_host see instructions below tcp_mode see instructions below experimental_capabilities Turn on experimental capabilities of a language server. This is a dictionary and differs per language server You can figure out the scope with Tools > Developer > Show Scope Name. You can figure out the syntax by opening the ST console and running view.settings().get(\"syntax\") . The default transport is stdio, but TCP is also supported. The port number can be inserted into the server's arguments by adding a {port} placeholder in command . Server-owned port Set tcp_port and optionally tcp_host if server running on another host. Editor-owned port (servers based on vscode-languageserver-node): Set tcp_mode to \"host\", leave tcp_port unset for automatic port selection. tcp_port can be set if eg. debugging a server. You may want to check out the LSP source and extend the TCP_CONNECT_TIMEOUT . Per-project overrides # Global LSP settings (which currently are lsp_format_on_save and lsp_code_actions_on_save ) can be overridden per-project in .sublime-project file: { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"lsp_format_on_save\" : true , } } Also global language server settings can be added or overridden per-project by adding an LSP object within the settings object. A new server configurations can be added there or existing global configurations can be overridden (either fully or partially). Those can override server configurations defined within the clients key in LSP.sublime-settings or those provided by external packages. Note : The settings and initializationOptions objects for server configurations will be merged with globally defined server configurations so it's possible to override only certain properties from those objects. { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"LSP\" : { \"jsts\" : { \"enabled\" : false , }, \"eslint\" : { \"settings\" : { \"eslint.autoFixOnSave\" : true // This property will be merged with original settings for // this client (potentially overriding original value). } } } } }","title":"Server Configuration"},{"location":"guides/server_configuration/#server-configuration","text":"After you have installed a language server, the LSP settings need to be configured to enable communication between LSP and that server for suitable filetypes. LSP ships with default configurations for a few language servers, but these need to be enabled before they will start. To globally enable a server, open the Command Palette and choose \"LSP: Enable Language Server Globally\". This will add \"enabled\": true to the corresponding language server setting under the \"clients\" key in your user-settings file for LSP. Your user-settings file is stored at Packages/User/LSP.sublime-settings and can be opened via \"Preferences > Package Settings > LSP > Settings\" from the menu. If your language server is missing or not configured correctly, you need to add/override further settings which are explained below. Here is an example of the LSP.sublime-settings file with configurations for the JavaScript/TypeScript server: { // General settings \"log_stderr\" : true , // Language server configurations \"clients\" : { \"lsp-tsserver\" : { \"command\" : [ \"lsp-tsserver\" ], \"enabled\" : true , \"languageId\" : \"typescript\" , \"document_selector\" : \"source.ts | source.tsx\" } } } Some language servers support multiple languages, which can be specified in the following way: { // General settings \"log_stderr\" : true , // Language server configurations \"clients\" : { \"lsp-tsserver\" : { \"command\" : [ \"lsp-tsserver\" ], \"enabled\" : true , \"languages\" : [{ \"languageId\" : \"javascript\" , \"document_selector\" : \"source.js | source.jsx\" }, { \"languageId\" : \"typescript\" , \"document_selector\" : \"source.ts | source.tsx\" }] } } } Setting Description enabled enables a language server (default is disabled) command must be on PATH or specify a full path, add arguments (can be empty if starting manually, then TCP transport must be configured) env dict of environment variables to be injected into the language server's process (eg. PYTHONPATH) settings per-project settings (equivalent to VS Code's Workspace Settings) initializationOptions options to send to the server at startup (rarely used) document_selector This is the connection between your files and language servers. It's a selector that is matched against the current view's base scope. If the selector matches with the base scope of the the file, the associated language server is started. If the selector happens to be of the form \"source.{languageId}\" (which it is in many cases), then you can omit this \"document_selector\" key altogether, and LSP will assume the selector is \"source.{languageId}\". For more information, see https://www.sublimetext.com/docs/3/selectors.html feature_selector Used to prioritize a certain language server when choosing which one to query on views with multiple servers active. Certain LSP actions have to pick which server to query and this setting can be used to decide which one to pick based on the current scopes at the cursor location. For example when having both HTML and PHP servers running on a PHP file, this can be used to give priority to the HTML one in HTML blocks and to PHP one otherwise. That would be done by setting \"feature_selector\" to text.html for HTML server and source.php to PHP server. Note: when the \"feature_selector\" is missing, it will be the same as the \"document_selector\". languageId identifies the language for a document - see LSP specifications languages group document_selector and languageId together for servers that support more than one language tcp_port see instructions below tcp_host see instructions below tcp_mode see instructions below experimental_capabilities Turn on experimental capabilities of a language server. This is a dictionary and differs per language server You can figure out the scope with Tools > Developer > Show Scope Name. You can figure out the syntax by opening the ST console and running view.settings().get(\"syntax\") . The default transport is stdio, but TCP is also supported. The port number can be inserted into the server's arguments by adding a {port} placeholder in command . Server-owned port Set tcp_port and optionally tcp_host if server running on another host. Editor-owned port (servers based on vscode-languageserver-node): Set tcp_mode to \"host\", leave tcp_port unset for automatic port selection. tcp_port can be set if eg. debugging a server. You may want to check out the LSP source and extend the TCP_CONNECT_TIMEOUT .","title":"Server Configuration"},{"location":"guides/server_configuration/#per-project-overrides","text":"Global LSP settings (which currently are lsp_format_on_save and lsp_code_actions_on_save ) can be overridden per-project in .sublime-project file: { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"lsp_format_on_save\" : true , } } Also global language server settings can be added or overridden per-project by adding an LSP object within the settings object. A new server configurations can be added there or existing global configurations can be overridden (either fully or partially). Those can override server configurations defined within the clients key in LSP.sublime-settings or those provided by external packages. Note : The settings and initializationOptions objects for server configurations will be merged with globally defined server configurations so it's possible to override only certain properties from those objects. { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"LSP\" : { \"jsts\" : { \"enabled\" : false , }, \"eslint\" : { \"settings\" : { \"eslint.autoFixOnSave\" : true // This property will be merged with original settings for // this client (potentially overriding original value). } } } } }","title":"Per-project overrides"}]}